#############################################################
## !! WARNING!!!
#
#  These functions are shared between bash and zsh, don't
#  forget to test them in both shells.
#
#  If you need to do something specific for one or the other
#  move it in to either .profile (bash) or .zshrc (zsh).
#
#############################################################

#
# GLOBALS
###

VIM=$(which vim)
GVIM=$(which gvim)
test "$GVIM" || \
  GVIM=$(which mvim)

###


function tm() {
        tmux attach-session || (cd ~/Development/; tmux )
}

#############################################################
# Encryption Fuctions
#############################################################
#
function decrypt {
        # decrypt if selected
        FILE=$1
        echo "-> decrypt: $(basename $FILE) "
        openssl enc -d -aes-256-cbc -salt -in "$FILE" -out "${FILE/.enc/}"
        FILE=""
}

function encrypt {
        # encrypt if selected
        FILE=$1
        echo "-> encrypt: $(basename $FILE) "
        openssl enc -e -aes-256-cbc -salt -in "$FILE" -out "$FILE.enc"
        FILE=""
}

#############################################################
# Function -- which to handle functions and aliases
#############################################################
#
function which {
    if ! /usr/bin/which $1
    then
        type $1 | head -1
    fi
}


#############################################################
# Function - quickly add strings to root .gitignore
#############################################################
#
function gitignore {
    echo "$1" >> $HOME/.gitignore
}


#############################################################
# Function - Finding files and directories
#############################################################
#
function ff() {
        find . -type f -name "*$1*"
}

function fd() {
        find . -type d -name "*$1*"
}

#############################################################
# SSH Agent Setup
#############################################################
#
SSH_ENV="$HOME/.ssh/environment"

function start_agent {
     echo "Initialising new SSH agent..."
     /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
     echo succeeded
     chmod 600 "${SSH_ENV}"
     . "${SSH_ENV}" > /dev/null
     /usr/bin/ssh-add;
}

# Source SSH settings, if applicable
if [ -f "${SSH_ENV}" ]; then
     . "${SSH_ENV}" > /dev/null
     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
         start_agent;
     }
else
     start_agent;
fi

function sgvim() {
  $GVIM -f "sudo:$@"
}

function svim() {
  $VIM -f "sudo:$@"
}

function gvim() {
  $GVIM -X "$@" &
}

function gvimdiff() {
  ${GVIM}diff -X "$@" &
}

function npm_exec() {
  PATH=$(npm bin):$PATH $@
}

function find {
  if [ `uname -s` = "Darwin" ]; then
    $browser="open"
  fi
  test "$browser" || browser=`which chromium-browser`
  test "$browser" || browser=`which google-chrome`
  test "$browser" || browser=`which firefox`
  query="`echo "$@" | sed -e 's:^[a-z\/\~\.]* ::' -e 's/-type [mg]//' -e 's/-name//'`"
  if [[ $@ =~ "-type m" ]]; then
    $browser "http://maps.google.com/?q=$query" 2>&1 > /dev/null &
  elif [[ $@ =~ "-type g" ]]; then
    $browser "http://www.google.com/search?q=$query" 2>&1 > /dev/null &
  else
    /usr/bin/find $@
  fi
}

#############################################################
# Function -- PSSH wrapper
#############################################################
pssh_exec="$(which pssh)"
if test "$pssh_exec"; then
  # wrapper (via ssh-agent)
  function pssh() {
    cmd="$@"
    if ! test -f hosts; then
      echo "pssh: 'hosts' file not found"
      return 1
    fi
    $pssh_exec --par=10 --hosts=./hosts -l $USER \
      -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no "$@"
  }

  # wrapper w/ password request
  function ppssh() {
    cmd="$@"
    if ! test -f hosts; then
      echo "pssh: 'hosts' file not found"
      return 1
    fi
    $pssh_exec --par=10 --hosts=./hosts -l $USER -A \
      -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no "$@"
  }

  # pass thru
  function pssh!() {
    $pssh_exec -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no $@
  }
else
  echo "Install pssh with 'pip install pssh'."
fi

pscp_exec="$(which pscp)"
if test "$pscp_exec"; then
  # wrapper (via ssh-agent)
  function pscp() {
    cmd="$@"
    if ! test -f hosts; then
      echo "pscp: 'hosts' file not found"
      return 1
    fi
    $pscp_exec --par=10 --hosts=./hosts -l $USER \
      -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no "$@"
  }

  # wrapper w/ password request
  function ppscp() {
    cmd="$@"
    if ! test -f hosts; then
      echo "pscp: 'hosts' file not found"
      return 1
    fi
    $pscp_exec --par=10 --hosts=./hosts -l $USER -A \
      -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no "$@"
  }

  # pass thru
  function pscp!() {
    $pscp_exec -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no $@
  }
fi

#############################################################
# Function -- Docker Flatten
#############################################################
function docker_flatten() {
    image_name=$(echo $1 | awk -F':' '{print $1}')
    image_tag=$(echo $1  | awk -F':' '{print $2}')
    test "$image_name" || return 1
    test "$image_tag"  || image_tag="latest"

    docker run --name $image_name $image_name:$image_tag && \
      (docker export $image_name | docker import - $image_name:${image_tag}_flat) && \
        docker rm $image_name
}

# vim: ft=sh:

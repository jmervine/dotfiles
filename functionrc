#############################################################
## !! WARNING!!!
#
#  These functions are shared between bash and zsh, don't
#  forget to test them in both shells.
#
#  If you need to do something specific for one or the other
#  move it in to either .profile (bash) or .zshrc (zsh).
#
#############################################################

#
# DEPS
###
function which {
    if ! /usr/bin/which $@
    then
        type $1 | head -1
    fi
}

function puts {
    if [[ $- =~ "i" ]]; then
        if [[ -z "$TMUX" ]]; then
            echo "$@"
        fi
    fi
}

#
# GLOBALS
###

VIM=$(/usr/bin/which vim 2> /dev/null)
GVIM=$(/usr/bin/which gvim 2> /dev/null)
test "$GVIM" || \
  GVIM=$(/usr/bin/which mvim 2> /dev/null)

###

function tm() {
    if [[ "$1" = "mine" || "$1" = "takeover" ]]; then
        tmux detach -a
        return $?
    fi

    if [[ "$1" = "killall" || "$1" = "kill" ]]; then
        tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill
        return $?
    fi

    tmux attach-session || (cd ~/; tmux )
}

#############################################################
# Encryption Fuctions
#############################################################
#
function decrypt {
        # decrypt if selected
        FILE=$1
        echo "-> decrypt: $(basename $FILE) "
        openssl enc -d -aes-256-cbc -salt -in "$FILE" -out "${FILE/.enc/}"
        FILE=""
}

function encrypt {
        # encrypt if selected
        FILE=$1
        echo "-> encrypt: $(basename $FILE) "
        openssl enc -e -aes-256-cbc -salt -in "$FILE" -out "$FILE.enc"
        FILE=""
}

#############################################################
# Function - quickly add strings to root .gitignore
#############################################################
#
function gitignore {
    echo "$1" >> $HOME/.gitignore
}


#############################################################
# Function - Finding files and directories
#############################################################
#
function ff() {
        find . -type f -name "*$1*"
}

function fd() {
        find . -type d -name "*$1*"
}

#############################################################
# SSH Agent Setup
#############################################################
#
SSH_ENV="$HOME/.ssh/environment"

function start_agent {
     echo "Initialising new SSH agent..."
     /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
     echo succeeded
     chmod 600 "${SSH_ENV}"
     . "${SSH_ENV}" > /dev/null
     /usr/bin/ssh-add;
}

# Source SSH settings, if applicable
if [ -f "${SSH_ENV}" ]; then
     . "${SSH_ENV}" > /dev/null
     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
         start_agent;
     }
else
     start_agent;
fi

function sgvim() {
  $GVIM -f "sudo:$@"
}

function svim() {
  $VIM -f "sudo:$@"
}

function gvim() {
  $GVIM -X "$@" &
}

function gvimdiff() {
  ${GVIM}diff -X "$@" &
}

function npm_exec() {
  PATH=$(npm bin):$PATH $@
}

#############################################################
# Function -- find wrapper
#############################################################
function find {
    if [ `uname -s` = "Darwin" ]; then
        browser="open"
    fi
    test "$browser" || browser=`which chromium-browser 2> /dev/null`
    test "$browser" || browser=`which google-chrome 2> /dev/null`
    test "$browser" || browser=`which firefox 2> /dev/null`
    query="`echo "$@" | sed -e 's:^[a-z\/\~\.]* ::' -e 's/-type [mg]//' -e 's/-name//'`"
    if [[ $@ =~ "-type m" ]]; then
        $browser "http://maps.google.com/?q=$query" 2>&1 > /dev/null &
    elif [[ $@ =~ "-type g" ]]; then
        $browser "http://www.google.com/search?q=$query" 2>&1 > /dev/null &
    else
        /usr/bin/find $@
    fi
}
puts "+ initialized find function"
puts "+ -type m :: google maps"
puts "+ -type g :: google search"

#############################################################
# Function -- myip
#############################################################
function myip {
    # When IP isn't found, use hostname.
    # This will pretty much always break though.
    if [[ "$(uname)" = "Darwin" ]]; then
        for en in en2 en1 en0; do
            ipaddr=$(ifconfig $en | grep "inet " | awk '{ print $2 }')
            if test "$ipaddr"; then
              echo $ipaddr
              return 0
            fi
        done
    else
        for eth in eth2 eth1 eth0; do
            ipaddr=$(ifconfig $eth | grep "inet " | awk '{ print $2 }')
            if test "$ipaddr"; then
                echo $ipaddr
                return 0
            fi
        done
    fi
    echo "$(hostname)"
}
puts "+ initialized myip function"

#############################################################
# Function -- PSSH wrapper
#############################################################
if test "$(which pssh 2> /dev/null)"; then
    pssh_exec=$(/usr/bin/which pssh)
    # wrapper (via ssh-agent)
    function pssh() {
      cmd="$@"
      if ! test -f hosts; then
        echo "pssh: 'hosts' file not found"
        return 1
      fi
      $pssh_exec --par=10 --hosts=./hosts -l $USER \
        -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no "$@"
    }

    function psshi() {
      cmd="$@"
      if ! test -f hosts; then
        echo "pssh: 'hosts' file not found"
        return 1
      fi
      $pssh_exec -i --par=10 --hosts=./hosts -l $USER \
        -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no "$@"
    }

    # wrapper w/ password request
    function ppssh() {
      cmd="$@"
      if ! test -f hosts; then
        echo "pssh: 'hosts' file not found"
        return 1
      fi
      $pssh_exec --par=10 --hosts=./hosts -l $USER -A \
        -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no "$@"
    }

    # pass thru
    function pssh!() {
      $pssh_exec -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no $@
    }

    puts "+ initialized pssh functions"
    puts "+ - pssh  :: pssh with './hosts'"
    puts "+ - ppssh :: pssh with './hosts' and password request"
    puts "+ - pssh! :: pssh pass through"
else
    echo "X install pssh with 'pip install pssh'"
fi

if test "$(which pscp 2> /dev/null)"; then
    pscp_exec=$(/usr/bin/which  pscp)
    # wrapper (via ssh-agent)
    function pscp() {
      cmd="$@"
      if ! test -f hosts; then
        echo "pscp: 'hosts' file not found"
        return 1
      fi
      $pscp_exec --par=10 --hosts=./hosts -l $USER \
        -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no "$@"
    }

    # wrapper w/ password request
    function ppscp() {
      cmd="$@"
      if ! test -f hosts; then
        echo "pscp: 'hosts' file not found"
        return 1
      fi
      $pscp_exec --par=10 --hosts=./hosts -l $USER -A \
        -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no "$@"
    }

    # pass thru
    function pscp!() {
      $pscp_exec -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no $@
    }

    puts "+ initialized pscp functions"
    puts "+ - pscp  :: pscp with './hosts'"
    puts "+ - ppscp :: pscp with './hosts' and password request"
    puts "+ - pscp! :: pscp pass through"
fi

#############################################################
# Function -- Docker Flatten
#############################################################
if test "$(which docker 2> /dev/null)"; then
    function docker_flatten() {
        echo "got: $@"
        image_name=$(echo $1 | awk -F':' '{print $1}')
        image_tag=$(echo $1  | awk -F':' '{print $2}')
        test "$image_name" || return 1
        test "$image_tag"  || image_tag="latest"

        docker run --name $image_name $image_name:$image_tag && \
          (docker export $image_name | docker import - $image_name:${image_tag}_flat) && \
            docker rm $image_name

        puts "+ initialized docker_flatten function"
        puts "+   usage: docker_flatten <image>[:<tag>]"
    }
fi

#############################################################
# Function -- Boot2Docker
#############################################################
if test "$(which boot2docker 2> /dev/null)"; then
    function docker_reset {
        puts "+ clearing docker variables"
        unset DOCKER_HOST
        unset DOCKER_CERT_PATH
        unset DOCKER_TLS_VERIFY
        echo "" > ~/.boot2dockerrc
    }

    function docker_up {
        docker_reset
        puts "+ starting boot2docker"
        boot2docker up | grep "export DOCKER_" | tee ~/.boot2dockerrc
        b2dSTATUS=$?
        . ~/.boot2dockerrc
        return $b2dSTATUS
    }

    function docker_down {
        puts "+ stopping boot2docker"
        boot2docker down
        return 0
    }

    function docker_reup {
        docker_down
        docker_up
        return $?
    }

    function b2d {
        if [[ "$@" = "reset" ]]; then
            docker_reset
            return 0
        fi

        if [[ "$@" = "up" ]]; then
            docker_up
            return $?
        fi

        if [[ "$@" = "reup" ]]; then
            docker_reup
            return $?
        fi

        # pass on to docker by default
        boot2docker $@
    }

    puts "+ initialized boot2docker functions"
    puts "+   usage: b2d [up|down|reup|reset]"
fi

# because some systems need this in /etc/bashrc
function shopt {
  bash -lc "shopt $@"
}
# vim: ft=sh:

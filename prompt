###############################################################
# Prompt
###############################################################
function git_branch_string {
    stat=`git status`
    if test "$(echo $stat | grep "^# On branch")"; then
      echo "`git status | grep "^# On branch .*$" | cut -d " " -f 4`"
    else
      echo "`git status | grep "^On branch .*$" | cut -d " " -f 3`"
    fi
}

function git_branch {

    RED="%{$fg[red]%}"
    GREEN="%{$fg[green]%}"
    YELLOW="%{$fg[yellow]%}"

    git rev-parse --git-dir &> /dev/null

    git_status="$(git status 2> /dev/null)"
    #echo "git_status:\n$git_status"

    branch_pattern="^On branch (.*)$"
    if ! test "$branch_pattern"; then
      branch_pattern="^# On branch (.*)$"
    fi

    remote_pattern="# Your branch is (.*) of"
    diverge_pattern="# Your branch and (.*) have diverged"
    ahead_pattern="^# Your branch is ahead of"

    if [[ ! ${git_status} =~ "working directory clean" ]]; then
        state=" ${RED}⚡"
    fi

    if [[ ${git_status} =~ ${remote_pattern} ]]; then
        if [[ ${git_status} =~ ${ahead_pattern} ]]; then
          remote=" ${YELLOW}↑"
        else
          remote=" ${YELLOW}↓"
        fi
    fi

    if [[ ${git_status} =~ ${diverge_pattern} ]]; then
        remote=" ${YELLOW}↕"
    fi

    if [[ ${git_status} =~ ${branch_pattern} ]]; then
        branch="`git_branch_string`"
        echo " ${branch}${remote}${state}"
    fi
}

function ruby_version {
    if test -f Gemfile || test "$(find . -maxdepth 1 -type f -name "*.rb")"; then
        echo "| %{$fg[red]%}`ruby -v | cut -d " " -f 2`%{$reset_color%} " 2>/dev/null
    fi
}

function node_version {
    if test -f package.json || test "$(find . -maxdepth 1 -type f -name "*.js")"; then
        echo "| %{$fg[green]%}`node -v | cut -d " " -f 2`%{$reset_color%} " 2>/dev/null
    fi
}

# _phc is something I use personally, external to git
# my .localrc overwites this
function _phc {
    echo ''
}

if test "$( zsh --version | awk '{print $2}' | awk -F'.' ' ( $1 > 4 || ( $1 == 4 && $2 > 3 ) || ( $1 == 4 && $2 == 3 && $3 >= 17 ) ) ' )"
then
    function zle-line-init zle-keymap-select {
        local old_ps1="$(echo $PS1 | sed -e 's@\$ $@@')"
        if [ "`uname`" = "Darwin" ]; then
          old_ps1="`echo ${PS1:0:-2}`"
        fi
        PS1="$old_ps1${${KEYMAP/vicmd/:}/(main|viins)/$} "
        zle reset-prompt
    }
    zle -N zle-line-init
    zle -N zle-keymap-select
fi

function precmd() {
    local p_git_branch="`git_branch`"
    if test "${p_git_branch}"
    then
      local p_git_branch="${p_git_branch}%{$reset_color%} "
    else
      local p_git_branch=" %T "
    fi
    local return_code="%(?..%{$fg[red]%}%? ↵%{$reset_color%})"

    test "$PS_SIGN" || export PS_SIGN="[I] "

    PS1="%{$fg[yellow]%}[%n@%m] %{$fg[blue]%}%~%{$reset_color%} $ "
    RPROMPT="%{$fg[red]%}${return_code} %{$reset_color%} [${p_git_branch}`_phc``ruby_version``node_version`]"
}

autoload -U colors && colors

# vim: ft=sh:
